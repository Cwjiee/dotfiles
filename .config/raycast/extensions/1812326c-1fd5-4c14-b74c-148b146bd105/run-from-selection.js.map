{
  "version": 3,
  "sources": ["../src/run-from-selection.ts", "../src/lib/run-text.ts", "../src/types/shell.ts", "../src/utils/get-alacritty-preferences.ts", "../src/lib/run-shell-command.ts", "../src/lib/spawn-alacritty.ts", "../src/utils/wrap-with-error-toast.ts"],
  "sourcesContent": ["import { getSelectedText } from \"@raycast/api\";\nimport { runText } from \"./lib/run-text\";\nimport { wrapWithErrorToast } from \"./utils/wrap-with-error-toast\";\n\nexport default wrapWithErrorToast(async () => {\n  const text = await getSelectedText();\n  if (!text.length) {\n    throw new Error(\"Selection is empty\");\n  }\n\n  await runText(\"selection\", text);\n});\n", "import { Alert, confirmAlert } from \"@raycast/api\";\nimport { Shell } from \"../types/shell\";\nimport { getAlacrittyPreferences } from \"../utils/get-alacritty-preferences\";\nimport { runShellCommand } from \"./run-shell-command\";\n\nconst makeCommand = (text: string) =>\n  [\n    // echo command to the terminal\n    `echo '${text}\\n'`,\n    // run command\n    text,\n    // prompt for key to exit\n    \"echo '\\nPress any key to exit.\\n'\",\n    // wait for key (zsh doesn't support -n)\n    getAlacrittyPreferences().shell === Shell.Zsh ? \"read -k1 -s\" : \"read -s -n1\",\n    // run each command in sequence, regardless of success\n  ].join(\" ; \");\n\nexport const runText = async (source: string, text: string) =>\n  await confirmAlert({\n    title: `Run command from ${source}`,\n    message: `Run the following command?\\n\\n${text}`,\n    primaryAction: {\n      title: \"Run\",\n      style: Alert.ActionStyle.Destructive,\n      onAction: async () => {\n        const command = makeCommand(text);\n        await runShellCommand(command);\n      },\n    },\n  });\n", "export enum Shell {\n  Bash = \"bash\",\n  Zsh = \"zsh\",\n  Fish = \"fish\",\n  Sh = \"sh\",\n}\n\nexport const isShell = (shell: string): shell is Shell => {\n  return Object.values(Shell).includes(shell as Shell);\n};\n", "import { getPreferenceValues } from \"@raycast/api\";\nimport { Shell, isShell } from \"../types/shell\";\n\nexport const getAlacrittyPreferences = () => {\n  const { alacrittyPath, shellPath } = getPreferenceValues<ExtensionPreferences>();\n  if (alacrittyPath.split(\"/\").pop() !== \"alacritty\") {\n    throw new Error(`Invalid Alacritty path: ${alacrittyPath}`);\n  }\n\n  const shell = shellPath.split(\"/\").pop();\n  if (!shell || !isShell(shell)) {\n    throw new Error(`Invalid shell: ${shell} (use ${Object.values(Shell).join(\", \")})`);\n  }\n\n  return { alacrittyPath, shellPath, shell };\n};\n", "import { access, constants } from \"fs/promises\";\nimport { getAlacrittyPreferences } from \"../utils/get-alacritty-preferences\";\nimport { spawnAlacritty } from \"./spawn-alacritty\";\n\nexport const runShellCommand = async (command: string) => {\n  const { shellPath } = getAlacrittyPreferences();\n  try {\n    await access(shellPath, constants.X_OK);\n  } catch (e) {\n    if (e instanceof Error) {\n      if (e.message.includes(\"ENOENT\")) {\n        throw new Error(`Shell not found at path: ${shellPath}`);\n      }\n      if (e.message.includes(\"EACCES\")) {\n        throw new Error(`Shell not executable at path: ${shellPath}`);\n      }\n    }\n\n    throw e;\n  }\n\n  return await spawnAlacritty([\"--command\", shellPath, \"-c\", command]);\n};\n", "import { spawn } from \"child_process\";\nimport { getAlacrittyPreferences } from \"../utils/get-alacritty-preferences\";\n\nexport const spawnAlacritty = (args: string[]) =>\n  new Promise((resolve, reject) => {\n    const { alacrittyPath } = getAlacrittyPreferences();\n\n    const alacritty = spawn(alacrittyPath, args);\n    alacritty.on(\"error\", (error) => {\n      if (error.message.includes(\"ENOENT\")) {\n        reject(new Error(`Alacritty not found at path: ${alacrittyPath}`));\n        return;\n      }\n\n      reject(error);\n    });\n    alacritty.stderr.on(\"data\", (data) => reject(new Error(data.toString())));\n    alacritty.on(\"close\", (code) => resolve(code));\n  });\n", "import { Toast, showToast } from \"@raycast/api\";\n\nexport const wrapWithErrorToast = (fn: () => Promise<unknown>) => async () => {\n  try {\n    await fn();\n  } catch (e) {\n    await showToast({\n      title: \"Error\",\n      message: e instanceof Error ? e.message : String(e),\n      style: Toast.Style.Failure,\n    });\n  }\n};\n"],
  "mappings": "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",
  "names": ["run_from_selection_exports", "__export", "run_from_selection_default", "__toCommonJS", "import_api", "import_api", "Shell", "isShell", "shell", "import_api", "getAlacrittyPreferences", "alacrittyPath", "shellPath", "shell", "isShell", "Shell", "import_promises", "import_child_process", "spawnAlacritty", "args", "resolve", "reject", "alacrittyPath", "getAlacrittyPreferences", "alacritty", "error", "data", "code", "runShellCommand", "command", "shellPath", "getAlacrittyPreferences", "spawnAlacritty", "makeCommand", "text", "getAlacrittyPreferences", "runText", "source", "command", "runShellCommand", "import_api", "wrapWithErrorToast", "fn", "e", "run_from_selection_default", "wrapWithErrorToast", "text", "runText"]
}
