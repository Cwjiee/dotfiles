"use strict";var m=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var A=(t,r)=>{for(var e in r)m(t,e,{get:r[e],enumerable:!0})},$=(t,r,e,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let o of S(r))!x.call(t,o)&&o!==e&&m(t,o,{get:()=>r[o],enumerable:!(s=P(r,o))||s.enumerable});return t};var F=t=>$(m({},"__esModule",{value:!0}),t);var I={};A(I,{default:()=>C});module.exports=F(I);var y=require("@raycast/api"),E=require("fs/promises"),g=require("path");var i=require("@raycast/api"),h=t=>async()=>{try{await t()}catch(r){await(0,i.showToast)({title:"Error",message:r instanceof Error?r.message:String(r),style:i.Toast.Style.Failure})}};var c=require("fs/promises");var f=require("@raycast/api");var l=(o=>(o.Bash="bash",o.Zsh="zsh",o.Fish="fish",o.Sh="sh",o))(l||{}),p=t=>Object.values(l).includes(t);var n=()=>{let{alacrittyPath:t,shellPath:r}=(0,f.getPreferenceValues)();if(t.split("/").pop()!=="alacritty")throw new Error(`Invalid Alacritty path: ${t}`);let e=r.split("/").pop();if(!e||!p(e))throw new Error(`Invalid shell: ${e} (use ${Object.values(l).join(", ")})`);return{alacrittyPath:t,shellPath:r,shell:e}};var w=require("child_process");var d=t=>new Promise((r,e)=>{let{alacrittyPath:s}=n(),o=(0,w.spawn)(s,t);o.on("error",a=>{if(a.message.includes("ENOENT")){e(new Error(`Alacritty not found at path: ${s}`));return}e(a)}),o.stderr.on("data",a=>e(new Error(a.toString()))),o.on("close",a=>r(a))});var u=async t=>{let{shellPath:r}=n();try{await(0,c.access)(r,c.constants.X_OK)}catch(e){if(e instanceof Error){if(e.message.includes("ENOENT"))throw new Error(`Shell not found at path: ${r}`);if(e.message.includes("EACCES"))throw new Error(`Shell not executable at path: ${r}`)}throw e}return await d(["--command",r,"-c",t])};var T=async t=>{let r=(await(0,E.lstat)(t.path)).isDirectory()?t.path:(0,g.dirname)(t.path),{shellPath:e}=n(),s=`cd '${r}' && ${e}`;return await u(s)},C=h(async()=>{let t=await(0,y.getSelectedFinderItems)();if(!t.length)throw new Error("Could not get the selected Finder items");await Promise.all(t.map(T))});
